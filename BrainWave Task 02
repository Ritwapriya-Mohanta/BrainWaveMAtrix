import sqlite3
import hashlib
import tkinter as tk
from tkinter import messagebox

# Database setup
def setup_database():
    conn = sqlite3.connect('inventory.db')
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            username TEXT PRIMARY KEY,
            password TEXT NOT NULL
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            price REAL NOT NULL
        )
    ''')

    conn.commit()
    conn.close()

# User authentication
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def authenticate_user(username, password):
    conn = sqlite3.connect('inventory.db')
    cursor = conn.cursor()
    hashed_password = hash_password(password)
    cursor.execute('SELECT * FROM users WHERE username=? AND password=?', (username, hashed_password))
    user = cursor.fetchone()
    conn.close()
    return user is not None

def add_user(username, password):
    conn = sqlite3.connect('inventory.db')
    cursor = conn.cursor()
    hashed_password = hash_password(password)
    cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_password))
    conn.commit()
    conn.close()

# Product management
def add_product(name, quantity, price):
    conn = sqlite3.connect('inventory.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO products (name, quantity, price) VALUES (?, ?, ?)', (name, quantity, price))
    conn.commit()
    conn.close()

def edit_product(product_id, name, quantity, price):
    conn = sqlite3.connect('inventory.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE products SET name=?, quantity=?, price=? WHERE id=?', (name, quantity, price, product_id))
    conn.commit()
    conn.close()

def delete_product(product_id):
    conn = sqlite3.connect('inventory.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM products WHERE id=?', (product_id,))
    conn.commit()
    conn.close()

def get_products():
    conn = sqlite3.connect('inventory.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM products')
    products = cursor.fetchall()
    conn.close()
    return products

def low_stock_alert(threshold):
    conn = sqlite3.connect('inventory.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM products WHERE quantity < ?', (threshold,))
    low_stock_items = cursor.fetchall()
    conn.close()
    return low_stock_items

# GUI application
class InventoryApp:
    def _init_(self, root):
        self.root = root
        self.root.title("Inventory Management System")
        setup_database()

        self.login_frame = tk.Frame(self.root)
        self.login_frame.pack(padx=10, pady=10)

        tk.Label(self.login_frame, text="Username").pack()
        self.username_entry = tk.Entry(self.login_frame)
        self.username_entry.pack()

        tk.Label(self.login_frame, text="Password").pack()
        self.password_entry = tk.Entry(self.login_frame, show='*')
        self.password_entry.pack()

        tk.Button(self.login_frame, text="Login", command=self.login).pack(pady=5)
        tk.Button(self.login_frame, text="Register", command=self.register).pack(pady=5)

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        if authenticate_user(username, password):
            self.login_frame.pack_forget()
            self.create_inventory_frame()
        else:
            messagebox.showerror("Error", "Invalid username or password")

    def register(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        if username and password:
            add_user(username, password)
            messagebox.showinfo("Success", "User registered successfully")
        else:
            messagebox.showerror("Error", "Please provide username and password")

    def create_inventory_frame(self):
        self.inventory_frame = tk.Frame(self.root)
        self.inventory_frame.pack(padx=10, pady=10)

        tk.Button(self.inventory_frame, text="Add Product", command=self.add_product).pack(pady=5)
        tk.Button(self.inventory_frame, text="Show Products", command=self.show_products).pack(pady=5)
        tk.Button(self.inventory_frame, text="Low Stock Alerts", command=self.low_stock_alert).pack(pady=5)

    def add_product(self):
        self.add_product_window = tk.Toplevel(self.root)
        self.add_product_window.title("Add Product")

        tk.Label(self.add_product_window, text="Product Name").pack(pady=5)
        self.product_name_entry = tk.Entry(self.add_product_window)
        self.product_name_entry.pack()

        tk.Label(self.add_product_window, text="Quantity").pack(pady=5)
        self.quantity_entry = tk.Entry(self.add_product_window)
        self.quantity_entry.pack()

        tk.Label(self.add_product_window, text="Price").pack(pady=5)
        self.price_entry = tk.Entry(self.add_product_window)
        self.price_entry.pack()

        tk.Button(self.add_product_window, text="Add", command=self.add_product_to_db).pack(pady=5)

    def add_product_to_db(self):
        name = self.product_name_entry.get()
        quantity = self.quantity_entry.get()
        price = self.price_entry.get()

        # Data validation
        if not name or not quantity or not price:
            messagebox.showerror("Error", "All fields are required")
            return
        
        try:
            quantity = int(quantity)
            price = float(price)
        except ValueError:
            messagebox.showerror("Error", "Invalid quantity or price")
            return

        if quantity < 0 or price < 0:
            messagebox.showerror("Error", "Quantity and price must be positive")
            return

        add_product(name, quantity, price)
        self.add_product_window.destroy()
        messagebox.showinfo("Success", "Product added successfully")

    def show_products(self):
        # Create a new window to display products
        self.show_products_window = tk.Toplevel(self.root)
        self.show_products_window.title("Products")

        products = get_products()

        # Create a frame for each product to hold the details and delete button
        for product in products:
            product_frame = tk.Frame(self.show_products_window)
            product_frame.pack(pady=5, padx=10)

            # Display product details
            tk.Label(product_frame, text=f"ID: {product[0]}, Name: {product[1]}, Quantity: {product[2]}, Price: {product[3]}").pack(side=tk.LEFT)

            # Create delete button for each product
            tk.Button(product_frame, text="Delete", command=lambda p_id=product[0]: self.delete_product(p_id)).pack(side=tk.RIGHT)

    def delete_product(self, product_id):
        if messagebox.askyesno("Confirm", "Are you sure you want to delete this product?"):
            delete_product(product_id)
            messagebox.showinfo("Success", "Product deleted successfully")
            self.show_products()  # Refresh the product list

    def low_stock_alert(self):
        threshold = 10  # Example threshold
        low_stock_items = low_stock_alert(threshold)
        self.low_stock_window = tk.Toplevel(self.root)
        self.low_stock_window.title("Low Stock Alerts")

        if low_stock_items:
            for item in low_stock_items:
                tk.Label(self.low_stock_window, text=f"ID: {item[0]}, Name: {item[1]}, Quantity: {item[2]}, Price: {item[3]}").pack(pady=5)
        else:
            tk.Label(self.low_stock_window, text="No low stock items").pack(pady=5)

if _name_ == "_main_":
    root = tk.Tk()
    app = InventoryApp(root)
    root.mainloop()
